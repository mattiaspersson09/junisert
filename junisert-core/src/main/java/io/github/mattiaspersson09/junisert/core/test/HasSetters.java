/*
 * Copyright (c) 2025-2025 Mattias Persson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.github.mattiaspersson09.junisert.core.test;

import io.github.mattiaspersson09.junisert.api.assertion.UnitAssertionError;
import io.github.mattiaspersson09.junisert.api.internal.service.ValueService;
import io.github.mattiaspersson09.junisert.api.value.Value;
import io.github.mattiaspersson09.junisert.common.logging.Logger;
import io.github.mattiaspersson09.junisert.core.reflection.Field;
import io.github.mattiaspersson09.junisert.core.reflection.Member;
import io.github.mattiaspersson09.junisert.core.reflection.Method;
import io.github.mattiaspersson09.junisert.core.reflection.Unit;
import io.github.mattiaspersson09.junisert.core.reflection.util.Methods;

import java.util.List;
import java.util.Objects;

public class HasSetters implements UnitTest {
    private static final Logger LOGGER = Logger.getLogger("Has Setters");

    private final ValueService valueService;
    private final InstanceCreator instanceCreator;

    public HasSetters(ValueService valueService) {
        this.valueService = valueService;
        this.instanceCreator = new InstanceCreator();
    }

    @Override
    public void test(Unit unit) {
        LOGGER.info("Testing unit: {0}", unit.getName());

        for (Field field : unit.getFields()) {
            // Ignores autogenerated synthetic fields (i.e. JaCoCo fields for data and such)
            if (field.isSynthetic()) {
                continue;
            }

            LOGGER.info("Checking field: {0}", field);

            List<Method> setters = unit.findMethodsMatching(method -> Methods.isSetterForField(method, field));

            if (setters.isEmpty()) {
                throw new UnitAssertionError(String.format("%s was expected to have setter for field: %s, "
                        + "but none was found", unit.getName(), field.getName()));
            }

            for (Method method : setters) {
                // Ignores autogenerated synthetic methods (i.e. JaCoCo methods and such)
                if (method.isSynthetic()) {
                    continue;
                }

                Value<?> fieldValue = valueService.getValue(field.getType());
                Object[] methodArguments = method.getParameterTypes()
                        .stream()
                        .map(valueService::getValue)
                        .map(Value::get)
                        .toArray();
                Object value = fieldValue.get();
                Object empty = fieldValue.asEmpty();

                Injection injection = new Injection(method, instanceCreator);
                injection.setup(instance -> field.setValue(instance, empty));
                injection.shouldResultIn(instance -> !Objects.equals(empty, field.getValueOrElse(instance, empty)));
                injection.onInjectionFail(() -> new UnitAssertionError("Failed to invoke setter"));

                if (!injection.inject(methodArguments)) {
                    LOGGER.fail("Expected method to set value for field but it did not",
                            concatName(unit, method) + " to set value for " + concatName(unit, field),
                            "it did not");
                    throw new UnitAssertionError(String.format("Found setter: %s, but it was not setting for field: %s",
                            method.getName(), field.getName()));
                }
            }
        }
    }

    private String concatName(Unit unit, Member member) {
        return unit.getName() + "." + member;
    }
}
