import com.diffplug.spotless.LineEnding

import java.nio.charset.StandardCharsets

plugins {
    id("java-library")
    id("jacoco")
    id("com.diffplug.spotless") version("7.0.2")
    id("maven-publish")
}

repositories {
    mavenCentral()
    mavenLocal()
}

group = rootProject.group
version = rootProject.version

dependencies {
    implementation(project(":junisert-api"))

    testImplementation(platform("org.junit:junit-bom:5.9.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.assertj:assertj-core:3.27.3")
    testImplementation("org.mockito:mockito-core:5.16.1")
    testImplementation(project(":junisert-testunits"))
}

java {
    sourceCompatibility(JavaVersion.VERSION_1_8)
    targetCompatibility(JavaVersion.VERSION_1_8)

    withSourcesJar()
//    withJavadocJar()
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version
        )
    }
}

compileJava {
    options.setRelease(8)
}

compileTestJava {
    options.setRelease(8)
}

javadoc {
    destinationDir = file(project.layout.buildDirectory.dir("docs/javadoc"))
}

test {
    useJUnitPlatform()

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    classDirectories.from(files(sourceSets.main.output))
    sourceDirectories.from(files(sourceSets.main.java.srcDirs))

    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*$NoOp*'])
        })
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}

spotless {
    java {
        toggleOffOn("<pre>", "</pre>")
        eclipse().configFile(rootProject.layout.projectDirectory.dir("gradle/spotless.eclipse_style.xml"))

        licenseHeaderFile(rootProject.layout.projectDirectory.dir("gradle/spotless.license"))
        removeUnusedImports()
        importOrderFile(rootProject.layout.projectDirectory.dir("gradle/spotless.importorder"))

        trimTrailingWhitespace()
        setEncoding(StandardCharsets.UTF_8)
        setLineEndings(LineEnding.UNIX)
        endWithNewline()
    }
}
